/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
bool solve(TreeNode* root, int p , vector<int> &arr){

    if(!root){
        return false;
    }

    arr.push_back(root -> val);
    if(root -> val == p){
        return true;
    }

    if(solve(root -> left , p , arr) || solve(root -> right , p , arr)){
        return true;
    }

    arr.pop_back();
    return false;
}    
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {

         vector<int>arr1, arr2;


         solve(root , p -> val, arr1);
         solve(root , q -> val , arr2);
         int ans = -1;
         for(int i = 0 ; i < arr1.size() ; i++){

            for(int j = 0 ; j < arr2.size() ; j++){
                if(arr1[i] == arr2[j]){
                    ans = arr1[i];
                    break;
                }
            }
         }   

         return new TreeNode(ans);
    }
};
